#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
    struct node* prev;
};

struct node* head = NULL;
// INSERT AT BEGGINING

void insertAtBeg(int val) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = val;
    ptr->next = head;
    ptr->prev = NULL;
    if (head != NULL) {
        head->prev = ptr;
    }
    head = ptr;
    printf("%d inserted at beginning\n", ptr->data);
}

// INSERT AT ENDING

void insertAtEnd(int val) {
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = val;
    ptr->next = NULL;
    if (head == NULL) {
        ptr->prev = NULL;
        head = ptr;
    } else {
        struct node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = ptr;
        ptr->prev = temp;
    }
    printf("%d inserted at end\n", ptr->data);
}

// INSERT AT SPECIFIC POSITION

void insertAtPos(int val,int pos){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    ptr->data = val;
    struct node* temp1 = head;
    struct node* temp2;
    for(int i = 1; i < pos ; i++){
      temp2 = temp1;
      temp1= temp1->next;
    }
    
    temp2->next = ptr;
    ptr->prev = temp2;
    ptr->next = temp1;
    temp1->prev = ptr;
    printf("%d is inserted at %d position\n",val,pos);
    
}

// DELETE AT BEGGINING
void deleteAtBeg(){
  int data = head->data;
  head = head->next;
  head->prev = NULL;
  printf("%d is deleted from beginning\n",data);
}

// DELETE AT ENDING
void deleteAtEnd(){
   struct node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        int data = temp->data;
        temp->prev->next = NULL;
        temp->prev = NULL;
          printf("%d is deleted from end\n",data);

}
// DELETE AT SPECIFIC POSITION
void deleteAtPos(int pos){
  
    struct node* temp1 = head;
    struct node* temp2;
    for(int i = 1; i < pos ; i++){
      temp2 = temp1;
      temp1= temp1->next;
    }
    int del = temp1->data;
    temp2->next = temp1->next;
    temp1->next->prev = temp2;
    free(temp1);
    printf("%d is deleted from %d position\n",del,pos);
    
}
// SEARCHING AN ELEMENT

void search(int key){
  struct node* temp = head;
  int i = 1;
        while (temp->next != NULL) {
            if(temp->data == key){
              printf("Key found at %d position\n",i);
              return;
            }
            temp = temp->next;
            i++;
        }
        printf("key not found\n\n");
}

// REVERSING LINKED LIST

void reverse(){
    struct node* temp = NULL;
    struct node* current = head;
    
      while(current!= NULL){
        temp = current->prev;
        current->prev = current->next;
        current->next = temp;
        current = current->prev;
      }
      
      if(head!= NULL){
        head = temp->prev;
      }
    
    
}

void display() {
    struct node* temp = head;
    if (temp == NULL) {
        printf("List is empty\n");
        return;
    }
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    insertAtBeg(1);
    insertAtBeg(2);
    insertAtBeg(3);
    insertAtEnd(7);
    insertAtEnd(9);
    insertAtEnd(6);
    display();
    deleteAtBeg();
    deleteAtEnd();
    display();
    search(7);
    search(10);
    reverse();
    display();
    insertAtPos(3,2);
    display();
    deleteAtPos(3);
    display();
    return 0;
}
